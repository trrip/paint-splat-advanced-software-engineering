<!DOCTYPE html>
<script src="/socket.io/socket.io.js"></script>

<html>

<head>
  <title><%= title %></title>
  <link rel="stylesheet" href="/stylesheets/style.css" />
  <meta name="viewport" content="width=device-width, user-scalable=no">
  <script src="https://cdn.jsdelivr.net/npm/p5@1.1.9/lib/p5.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link rel="stylesheet1" href="./stylesheets/style.css" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
            
</head>
<body scroll="no" style="overflow: hidden">
<div class="section no-pad-bot" id="before-game">
  <div class="container">
    <div class="row center">
      <div class="col s12 m8 offset-m2">
        <h4 class="light">Waiting for players to join... </h4>
  
      <div class="row center">
        <img src="/resources/loading.gif"></div>
        
    </div>
    </div>
  </div>
  </div>
</div>


<!-- <div class="section no-pad-bot" id="loading-winners">
  <div class="container">
    <div class="row center">
      <div class="col s12 m8 offset-m2">
        <h4 class="light">Loading winners </h4>
  
      <div class="row center">
        <img src="/resources/loading.gif"></div>
    </div>
    </div>
  </div>
  </div>
</div> -->

<div class="section no-pad-bot" id="after-game">
  <div class="container">
    <div class="row center">
      <div class="col s12 m8 offset-m2">
        <h4 class="light" id = "game-results"></h4>
        <div class="row center">
          <a href="/" id="download-button" class="btn-large waves-effect waves-light indigo darken-4">Continue</a>
        </div>
      </div>
      
    </div>
  </div>
  </div>
</div>

<script>
  document.getElementById("after-game").style.display = "none";
  
  class Player{
    constructor(socketId) {
      this.socketId = socketId ;
      this.count = 0;
    }
    getCount() {
      return this.count;
    }
  }

  class Splat {
    constructor(color, x, y) {
      this.color = color;
      this.x = x;
      this.y = y;
    }
    getColor() {
      return this.color;
    }
  }


  let MAX_NUMBER_OF_PLAYERS = 4;
  let SPEED = 0;
  let GAMETIME = 20000;
  let AllUsers = [];
  let userColorMap = [
    "#00FF00", //dummy holder.
    "#ffa500 ",
    "#3792cb",
    "#800000",
    "#00FF00",    
  ];

  let playerColourNames = [
    "Green",
    "Orange",
    "Blue",
    "Red"
  ]
  let playerIndex = 0;

  var socket = io.connect({ timeout: GAMETIME, autoConnect: true });
  
  var isGameStarted = false;

  let roomId = "";
  buttonHandler = (event) => {
    if (roomId === "") {
      isGameStarted = false;
    } else {
    }
  };

  let theCombination = [-1, 1, 1, -1, 1, 1, 1, -1, -1, -1];

  let finalScores = [];
  let splats = [];
  let xVal = 1;
  let yVal = 0;
  let t = 0;
  let frame = 0;
  let boardWidth = 300;
  let boardHeight = 300;
  var canvasHeight ;//= windowHeight - 80;
  var canvasWidth ;
  let x = 50;
  let y = 50;
  let score = 0;
  let userId = null;
  let gameEnd = null;
  let showMessage = false;
  let messageTimer = 0;
  let messageX = 0;
  let messageY = 0;
  let message = "";
  let canThrow = true;
  let SCALE = 1;

  socket.on('connect', () => {
    let localPlayerName = (parseInt(socket.id.split("_")[1])%MAX_NUMBER_OF_PLAYERS) + 1
    AllUsers.push(new Player("Player " + localPlayerName)); // adding this becuase the color issue was apprearing 
  });
  
  socket.on("gameCom", function (data) {
    if (data.message.status == 200) { // initalizing the data values from the server.
      userId = socket.id;
      isGameStarted = true;
      roomId = data.roomId;
      x = 35 ; //data.message.startX % boardWidth;
      y = 50 ; // data.message.startY % boardHeight;
      xVal = data.message.initialVelX;
      yVal = data.message.initialVelY;
      gameEnd = data.message.gameEnd;
      SPEED = data.message.speed;
      // SPEED = 0; // testing speed 
    } else if (data.message.status == 201) {
      if (AllUsers.find(localx => {
        return localx.socketId === data.message.user;
      }) === undefined) {
      // } else { 
        AllUsers.push(new Player(data.message.user));
      }

      let playerObj = AllUsers.find(localx => {
        return localx.socketId === data.message.user;
      }) 
      let newIndex = AllUsers.findIndex(localx => {
        return localx.socketId === data.message.user;
      });
      let newSpat = new Splat(
        userColorMap[newIndex],
        data.message.xCoordinate,
        data.message.yCoordinate
      );
      playerIndex = newIndex ;
      splats.push(newSpat);
      playerObj.count +=1;
    } else if (data.message.status == 202) {
      finalScores = [];
      let tempUserHolder = AllUsers.sort((x,y) => x.count > y.count)
      for (let i = 1; i < AllUsers.length ; i++){
        finalScores.push(tempUserHolder[i]);
      }
    } else {
    }
  });
  

  //setup function: like init state.
  function setup() {
    var canvasSize = windowHeight - 65;
    canvasHeight = windowHeight - 65;
    canvasWidth = windowWidth - 65;
    createCanvas(canvasWidth - 65, canvasHeight - 65);
    
    console.log(canvasWidth-65);

    if((canvasWidth - 65 ) < 490 ){
      // mobile device.
      SCALE = 0.6
    }
    boardHeight = boardHeight * SCALE;
    boardWidth = boardWidth * SCALE;
    
  }
  // funcation called when the windows size is changed
  function windowResized() {
  resizeCanvas(windowWidth -65, windowHeight-65);
  canvasHeight = windowWidth - 65;
  canvasHeight = windowHeight - 65;
  
  }

  function getRandomPathSelector() {
    return Math.floor(Math.random() * 9 + 1);
  }

  function draw() {

    if (isGameStarted && Date.now() < gameEnd) {
      document.getElementById("before-game").style.display = "none";

      clear()
      background(255);
      noFill();
      strokeWeight(1);
      stroke(255);
      fill("rgb(100%,100%,50%)");
      
      //randomizing and board logic
      if (x + xVal > canvasWidth - boardWidth - 80 || x + xVal < 0) {
        if (x > 5 && x < canvasWidth) {
          yVal = yVal * theCombination[getRandomPathSelector() - 1];
        }
        xVal = xVal * -1;
      }
      if (y + yVal > canvasHeight - boardHeight - 80 || y + yVal < 0) {
        if (y > 5 && y < canvasHeight) {
          xVal = xVal * theCombination[getRandomPathSelector() - 1];
        }
        yVal = yVal * -1;
      }

      if (
        !(y + yVal > canvasHeight - boardHeight || y + yVal < 0) &&
        !(x + xVal > canvasWidth - boardWidth  || x + xVal < 0) &&
        frame % 10 == 0 &&
        Math.random() > 0.5 &&
        y > 2 &&
        y < canvasHeight
      ) {
        yVal = yVal * theCombination[getRandomPathSelector() - 1];
      }
      if (
        !(y + yVal > canvasHeight - boardHeight || y + yVal < 0) &&
        !(x + xVal > canvasWidth - boardWidth || x + xVal < 0) &&
        frame % 10 == 0 &&
        Math.random() > 0.5 &&
        x > 2 &&
        x < canvasWidth
      ) {
        xVal = xVal * theCombination[getRandomPathSelector() - 1];
      }

      frame += 1;
      fill('#F5C74A');
      square(x, y, boardWidth);
      for (let i = 0; i < splats.length; i++) {
        strokeWeight(1);
        stroke(51);
        let finalColor = color(splats[i].color);
        if (finalColor == null) {
          finalColor = "#FF00FF";
        }
        // image(tempImage[userColorMap.indexOf(splats[i].color)], x + splats[i].x - 65, y + splats[i].y - 65,20,20);
        fill(finalColor);
        //adjusted from 65 to 55 to make the click center
        circle(x + splats[i].x - 65, y + splats[i].y - 65, 25 * SCALE);
      }
      
      //Increase the speed of board over time.
      let increaseSpeed = map(Date.now() - gameEnd, GAMETIME,1,1,10);
      x = x + xVal * (SPEED + 2 * (20 - increaseSpeed));
      y = y + yVal * (SPEED + 2 * (20 - increaseSpeed));

      if (messageTimer > 0) {
        strokeWeight(messageTimer / 30);
        fill(messageTimer, messageTimer, messageTimer, 100)
        text(message, messageX - 70, messageY - 75)
        messageTimer--;
        canThrow = false;
      } else {
        canThrow = true;
      }

      // changing the text size in processing.
      textSize(24);
      // adding the user id on the screen.
      fill(0, 102, 153);
      text(`id : ${AllUsers[0].socketId}`, 30, 30);

    } else if (gameEnd === null || Date.now() < gameEnd) {
      // text("Waiting room ", 100, 80);
    } else if (gameEnd === null || Date.now() < gameEnd + 400) {
      // 
      background(255);
      noFill();
      strokeWeight(4);
      stroke(51);
      fill("rgb(100%,100%,100%)");
      if(score > 0 && splats.length > 0 ) {
        socket.emit("gameCom", {
          roomId: roomId,
          message: {
            score: score,
            status: 202,
            userId: userId, 
            userColour: playerColourNames[playerIndex]
          },
        });
     } else {

     }
    } else {
      clear()
      let isDraw = false;
      if(finalScores.length == 0) {
        document.getElementById("after-game").style.display = "block";
        document.getElementById("game-results").innerText = `The match was a draw!`;
      } else {
        let winner = null;
      let finalResultString = "";
      
      for (let i = finalScores.length -1 ; i >= 0; i) {
        document.getElementById("after-game").style.display = "block";
        finalResultString += `\nThe score is ${generateFinalName(finalScores[i].socketId)} who achieved a score of ${finalScores[i].count}`;
      }

   
      if(isDraw) {
        document.getElementById("after-game").style.display = "block";
        document.getElementById("game-results").innerText = `The match was a draw!`;

      } else {
        document.getElementById("after-game").style.display = "block";
        document.getElementById("game-results").innerText = finalResultString;
        socket.destroy();      
      }
      
      }
      setTimeout(() => {
        window.location.replace("/");
      }, 5000);
    }
  }

  function generateFinalName(socketId){
    let seperatedValues = socketId.split("_");
    return  `Player ${seperatedValues[1] % MAX_NUMBER_OF_PLAYERS + 1}`;
  }

function drawSplat(newSplatX, newSplatY){

  if (
        canvasLimit(x, y, newSplatX, newSplatY) &&
        eucldist(newSplatX - x + 5, newSplatY - y + 5)
      ) {
        message = "hit"
        socket.emit("gameCom", {
          roomId: roomId,
          message: {
            x: x,
            y: y,
            xCoordinate: newSplatX - x + 5,
            yCoordinate: newSplatY - y + 5,
            user: socket.id,
            status: 201,
          },
        });
        score += 1;
      } else {
        message = "miss"

      }
  }

  function mousePressed(splat) {
    let newPoint = {x:0,y:0}
      if(splat.x == undefined){
        canThrow = 
        newPoint.x = splat.screenX == 0 ? splat.clientX : splat.screenX;
        newPoint.y = splat.screenY == 0 ? splat.clientY : splat.screenY;
      }else{
        newPoint.x = splat.x;
        newPoint.y = splat.y;
      }

      if (canThrow) {
      messageTimer = 50;
      messageX = newPoint.x;
      messageY = newPoint.y;
      if(splat.x == undefined){
        canThrow = true;
      }
      drawSplat(newPoint.x,newPoint.y)
    }
  }
  function eucldist(splatx, splaty) {
    for (let i = 0; i < splats.length; i++) {
      if (
        Math.sqrt(
          Math.pow(
            splats[i].x - splatx, 2
          ) + Math.pow(splats[i].y - splaty, 2)) < 27) {
        return false
      }
    }
    return true
  }
  function canvasLimit(x, y, splatx, splaty) {
    // console.log(`x: ${x} y: ${y} xs: ${splatx} ys: ${splaty}`);
    splatx -= 60;
    splaty -= 60;
    return (
      splatx + 5 > x + 7 &&
      splatx - boardWidth < x &&
      splaty - 5 > y &&
      splaty - boardHeight < y
    );
  }
</script>

</body>

</html>